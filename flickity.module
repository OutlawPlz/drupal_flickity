<?php

/**
* @file
* Provides Flickity library integration for Drupal.
*/

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\flickity\Entity\Flickity;

/**
 * Implements hook_theme().
 */
function flickity_theme($existing, $type, $theme, $path) {

  return array(
    'flickity' => array(
      'render element' => 'element'
    ),
    'views_view_flickity' => array(
      'variables' => array(
        'view' => NULL,
        'rows' => NULL
      )
    )
  );
}

/**
 * Implements template_preprocess().
 */
function template_preprocess_flickity(&$variables) {

  // Flickity formatter is a clone of the default field formatter.
  template_preprocess_field($variables, NULL);
  // Set Flickity attribute.
  $variables['content_attributes']['data-flickity-options'] = $variables['element']['#flickity_options'];
}

/**
 * Implements template_preprocess().
 */
function template_preprocess_views_view_flickity(&$variables) {

  // Flickity views style is a clone of the default unformatted view style.
  template_preprocess_views_view_unformatted($variables);

  $config = $variables['view']->style_plugin->options['flickity_config'];

  // Attach Flickity library and set attributes.
  $variables['#attached']['library'][] = 'flickity/flickity';
  $variables['attributes']['data-flickity-options'] = $config;

  // Load Flickity options.
  /** @var \Drupal\flickity\Entity\Flickity $entity */
  $entity = Flickity::load($config);
  $variables['#attached']['drupalSettings']['flickity'][$config] = $entity->getFormattedOptions();

  // Set cache metadata.
  $variables['#cache']['tags'][] = $entity->getCacheTagsToInvalidate();
}
